# Rock Paper Scissors - React Native + Python Backend

A beautiful Rock Paper Scissors game with React Native frontend and Python backend featuring AI logic, animations, and haptic feedback.

## Features

### Frontend (React Native)
- 🎨 Beautiful gradient UI with smooth animations
- 📱 Responsive design that works on all screen sizes
- 🎯 Interactive buttons with scale animations and haptic feedback
- 🏆 Real-time score tracking with color-coded results
- ⏸️ Pause/Resume functionality with overlay
- 🔄 Reset game feature
- 🎊 Visual feedback for wins, losses, and ties

### Backend (Python)
- 🤖 Intelligent AI opponent using pattern recognition
- 🔄 RESTful API endpoints for game actions
- 📊 Game state management
- 🎯 Advanced move prediction algorithms

## Prerequisites

### For Python Backend
- Python 3.8 or higher
- pip package manager

### For React Native Frontend
- Node.js 16 or higher
- npm or yarn package manager
- Expo CLI
- Expo Go app on your mobile device (for testing)

## Setup Instructions

### 1. Backend Setup (Python)

```bash
# Create a new directory for your project
mkdir rock-paper-scissors-game
cd rock-paper-scissors-game

# Create backend directory
mkdir backend
cd backend

# Create virtual environment (recommended)
python -m venv venv

# Activate virtual environment
# On Windows:
venv\Scripts\activate
# On macOS/Linux:
source venv/bin/activate

# Install required packages
pip install -r requirements.txt

# Run the Flask server
python game_server.py
```

The backend server will start on `http://localhost:5000`

### 2. Frontend Setup (React Native)

```bash
# Go back to project root
cd ..

# Create frontend directory
mkdir frontend
cd frontend

# Initialize React Native project with Expo
npx create-expo-app . --template blank

# Install dependencies
npm install expo-linear-gradient expo-haptics

# Replace the default App.js with our custom App.js
# Copy the App.js content from above

# Update package.json with our dependencies
# Copy the package.json content from above

# Start the development server
npm start
```

### 3. File Structure

After setup, your project structure should look like this:

```
rock-paper-scissors-game/
├── backend/
│   ├── game_server.py
│   ├── requirements.txt
│   └── venv/
└── frontend/
    ├── App.js
    ├── package.json
    └── node_modules/
```

## Running the Game

### Step 1: Start the Python Backend
```bash
cd backend
# Activate virtual environment if not already active
source venv/bin/activate  # On macOS/Linux
# or
venv\Scripts\activate     # On Windows

# Run the server
python game_server.py
```

You should see output like:
```
* Running on all addresses (0.0.0.0)
* Running on http://127.0.0.1:5000
* Running on http://[your-ip]:5000
```

### Step 2: Start the React Native Frontend
```bash
# In a new terminal, navigate to frontend directory
cd frontend

# Start Expo development server
npm start
```

This will open the Expo Developer Tools in your browser.

### Step 3: Run on Device/Emulator

#### Option A: Physical Device
1. Install "Expo Go" app on your phone
2. Scan the QR code from the Expo Developer Tools
3. The app will load on your device

#### Option B: Emulator
1. Press 'a' for Android emulator
2. Press 'i' for iOS simulator (macOS only)

## Configuration

### Backend Configuration
- **Port**: The backend runs on port 5000 by default
- **Host**: Set to '0.0.0.0' to allow connections from other devices
- **CORS**: Enabled for cross-origin requests

### Frontend Configuration
- **API_URL**: Update the `API_URL` in `App.js` to match your backend server
- For physical device testing, replace `localhost` with your computer's IP address

```javascript
// In App.js, update this line:
const API_URL = 'http://YOUR_COMPUTER_IP:5000';
```

## API Endpoints

The Python backend provides these endpoints:

- `POST /play` - Play a round with choice (R, P, S)
- `POST /pause` - Pause the game
- `POST /resume` - Resume the game
- `POST /reset` - Reset the game
- `GET /status` - Get current game status

## Game Controls

- **🪨 Rock**: Defeats Scissors
- **📄 Paper**: Defeats Rock  
- **✂️ Scissors**: Defeats Paper
- **Pause/Resume**: Control game state
- **Reset**: Clear scores and start over

## Troubleshooting

### Common Issues

1. **Connection Error**: 
   - Make sure both backend and frontend are running
   - Check that the API_URL in App.js matches your backend server
   - For mobile devices, use your computer's IP address instead of localhost

2. **Module Not Found**:
   - Run `pip install -r requirements.txt` for Python dependencies
   - Run `npm install` for React Native dependencies

3. **Expo Issues**:
   - Try `npm start -- --clear` to clear cache
   - Make sure you have the latest version of Expo CLI

4. **CORS Errors**:
   - The backend has CORS enabled, but if you still get errors, check your network configuration

### Development Tips

- Use `expo start --tunnel` for easier mobile testing
- Enable live reload in Expo for faster development
- Check browser console and React Native debugger for errors
- The Python backend includes debug mode for detailed error messages

## Customization

### Styling
- Modify colors in the `styles` object in `App.js`
- Change gradient colors in the `LinearGradient` component
- Adjust animation timings and effects

### Game Logic
- Modify AI behavior in `game_server.py`
- Add new game modes or difficulty levels
- Implement different scoring systems

### Features to Add
- Sound effects
- Multiplayer support
- Game statistics
- Different AI difficulty levels
- Custom themes

Enjoy your Rock Paper Scissors game! 🎮